import esbuild from "esbuild";
import process from "process";
import fs from "fs";
import path from "path";
import { exec } from "child_process";

// Banner for the built files
const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// Define the Obsidian vault plugin directory path
const homedir = process.env.HOME || process.env.USERPROFILE;
const obsidianVaultPluginDir = `${homedir}/Desktop/ObsidianVault/.obsidian/plugins/related-notes`;

// Function to copy built files to Obsidian vault
async function copyToObsidianVault() {
  try {
    // Create plugin directory if it doesn't exist
    await fs.promises.mkdir(obsidianVaultPluginDir, { recursive: true })
      .catch(err => {
        // Ignore if directory already exists
        if (err.code !== 'EEXIST') throw err;
      });
      
    // Copy main.js
    await fs.promises.copyFile('main.js', `${obsidianVaultPluginDir}/main.js`);
    
    // Copy styles.css
    await fs.promises.copyFile('styles.css', `${obsidianVaultPluginDir}/styles.css`);
    
    // Copy manifest.json
    await fs.promises.copyFile('manifest.json', `${obsidianVaultPluginDir}/manifest.json`);
    
    console.log(`Files copied to Obsidian vault at ${obsidianVaultPluginDir}`);
  } catch (err) {
    console.error('Error copying files to Obsidian vault:', err);
  }
}

// Function to run esbuild
async function runEsbuild() {
  // Create the build context
  const context = await esbuild.context({
    banner: {
      js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      "natural",
      "levelup",
      "leveldown",
      "underscore",
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: "inline",
    treeShaking: true,
    outfile: "main.js",
  });

  // Initial build
  await context.rebuild();
  console.log('Initial build complete, copying files to Obsidian vault...');
  await copyToObsidianVault();

  // Set up a file watcher
  console.log('Watching for changes...');
  await context.watch();

  // Set up manual file watcher for the output file
  fs.watchFile('main.js', { interval: 1000 }, async (curr, prev) => {
    if (curr.mtime > prev.mtime) {
      console.log('Build output changed, copying to Obsidian vault...');
      await copyToObsidianVault();
    }
  });

  // Keep the process running
  console.log('Dev server running. Press Ctrl+C to stop.');
}

// Run the build and watch process
runEsbuild().catch(err => {
  console.error('Error in build process:', err);
  process.exit(1);
});