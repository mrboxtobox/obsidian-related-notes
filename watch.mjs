import { exec } from "child_process";
import { watch } from "fs";
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
  `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const targetDir = "~/Desktop/ObsidianVault/.obsidian/plugins/obsidian-related-notes/";

function copyFiles() {
  return new Promise((resolve, reject) => {
    const cmd = `cp main.js manifest.json styles.css ${targetDir}`;
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error copying files: ${error}`);
        reject(error);
        return;
      }
      console.log(`Files copied to ${targetDir}`);
      resolve();
    });
  });
}

const context = await esbuild.context({
  banner: { js: banner },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    "natural",
    "levelup",
    "leveldown",
    "underscore",
    ...builtins
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: "inline",
  treeShaking: true,
  outfile: "main.js",
  plugins: [{
    name: 'watch-plugin',
    setup(build) {
      build.onEnd(async () => {
        console.log('Build completed');
        await copyFiles();
      });
    },
  }],
});

watch('manifest.json', async () => {
  console.log('manifest.json changed, copying files...');
  await copyFiles();
});

watch('styles.css', async () => {
  console.log('styles.css changed, copying files...');
  await copyFiles();
});

await context.rebuild();
await copyFiles();
await context.watch();

console.log("Watching for changes in src directory, manifest.json, and styles.css...");
console.log(`Files will be automatically copied to ${targetDir}`);
console.log("Press Ctrl+C to stop");

process.stdin.resume();